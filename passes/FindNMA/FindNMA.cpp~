#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#include <chrono>
#include <thread>
#include "llvm/Pass.h"
#include "llvm/IR/Function.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/Transforms/IPO/PassManagerBuilder.h"
#include "llvm/Transforms/Utils/Cloning.h"
#include "llvm/Analysis/BasicAliasAnalysis.h"
#include "llvm/IR/IntrinsicInst.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/Analysis/CFG.h"
#include "llvm/Analysis/LoopInfo.h"
#include "llvm/IR/InstIterator.h"

using namespace std;
using namespace llvm;

namespace {

  vector<Instruction*> CandidateNMAs;
  #include "../DecoupleCommon/Decouple.h"
  std::map<std::string, int> seen_functions;
  bool isKernelFunction(Function &func) {
    
    if (
	((func.getName().str().find(SUPPLY_KERNEL_STR)  != std::string::npos) ||
	 (func.getName().str().find(COMPUTE_KERNEL_STR) != std::string::npos)) ||
	(func.getName().str().find(KERNEL_STR) != std::string::npos)
	) {
      //errs() << "found kernel:\n";
      //errs() << func.getName().str() << "\n";
      return true;
    }
    return false;  
  }

  bool check_indirect_load(Module &M, Instruction *I) {
    Value * val = I->getPointerOperand();
    if(isa<LoadInst>(val)) {
      return true;
    }
    return false;
  }
    
  void findCandidateNMAs(Module &M, Function &f){
    for (inst_iterator iI = inst_begin(&f), iE = inst_end(&f); iI != iE; ++iI) {
      if (isa<LoadInst>(*iI)) {
	if (check_indirect_load(M, dyn_cast<LoadInst>(*iI))){
	  CandidateNMAs.push_back(&(*iI));
	}
      }
    }
  }
	    
	   
  void print_kernel_load_addresses(Module &M, Function &f){
    for (inst_iterator iI = inst_begin(&f), iE = inst_end(&f); iI != iE; ++iI) {
      if (isa<LoadInst>(*iI)) {
	LoadInst * tmp = dyn_cast<LoadInst>(&(*iI));
	auto to_store = tmp->getPointerOperand()->getName().str;
	if (seen)functions.find(to_store) == seen_functions.end()) {
	seen_functions[to_store] = 0;
      }
      seed_functions[to_store]++;
    }
  }
  
  
  struct FindNMAPass : public ModulePass {
    static char ID;
    FindNMAPass() : ModulePass(ID) {}

    virtual bool runOnModule(Module &M) {
      errs() << "[Find NMA Pass Begin]\n";

      
      for (Module::iterator fI = M.begin(), fE = M.end(); fI != fE; ++fI) {
	if (isKernelFunction(*fI)) {
	  errs() << "[Found Kernel]\n";	  
	  errs() << "[" << fI->getName().str() << "]\n";
	  findCandidateNMAs(M, *fI);
	  //print_kernel_call_funcs(M, *fI);
	}
      }
      
      errs() << "[Number of Candidates: ";
      errs() << (CandidateNMAs.size());
      errs() << "]\n";
      
      for (int i=0;i<CandidateNMAs.size();i++){
	errs() << "[" << *(CandidateNMAs[i]) << "]\n";
      }
      
      //errs() << "[functions not inlined]\n";

      //for ( const auto &myPair : seen_functions ) {
      //	errs() << myPair.first << " : " << myPair.second << "\n";
      //}

      errs() << "[Find NMA Pass Finished]\n";
      return true;

    }
  };
}

char FindNMAPass::ID = 0;
static RegisterPass<FindNMAPass> X("findnmas", "Find NMA Pass", false, false);
